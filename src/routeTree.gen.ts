/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as ExternalLoginRouteImport } from './routes/_external/login'
import { Route as AuthTransactionsRouteImport } from './routes/_auth/transactions'
import { Route as AuthStylistsRouteImport } from './routes/_auth/stylists'
import { Route as AuthSettingsRouteImport } from './routes/_auth/settings'
import { Route as AuthCustomersRouteImport } from './routes/_auth/customers'
import { Route as AuthBookingsRouteImport } from './routes/_auth/bookings'
import { Route as AuthSettingsIndexRouteImport } from './routes/_auth/settings.index'
import { Route as AuthSettingsServiceCategoriesRouteImport } from './routes/_auth/settings.service-categories'
import { Route as AuthSettingsProvidersRouteImport } from './routes/_auth/settings.providers'
import { Route as AuthSettingsCountriesRouteImport } from './routes/_auth/settings.countries'
import { Route as AuthSettingsConfigurationRouteImport } from './routes/_auth/settings.configuration'
import { Route as AuthSettingsPlansIndexRouteImport } from './routes/_auth/settings.plans.index'
import { Route as AuthSettingsPlansPlanIdRouteImport } from './routes/_auth/settings.plans.$planId'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const ExternalLoginRoute = ExternalLoginRouteImport.update({
  id: '/_external/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthTransactionsRoute = AuthTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AuthRoute,
} as any)
const AuthStylistsRoute = AuthStylistsRouteImport.update({
  id: '/stylists',
  path: '/stylists',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingsRoute = AuthSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCustomersRoute = AuthCustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => AuthRoute,
} as any)
const AuthBookingsRoute = AuthBookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingsIndexRoute = AuthSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthSettingsRoute,
} as any)
const AuthSettingsServiceCategoriesRoute =
  AuthSettingsServiceCategoriesRouteImport.update({
    id: '/service-categories',
    path: '/service-categories',
    getParentRoute: () => AuthSettingsRoute,
  } as any)
const AuthSettingsProvidersRoute = AuthSettingsProvidersRouteImport.update({
  id: '/providers',
  path: '/providers',
  getParentRoute: () => AuthSettingsRoute,
} as any)
const AuthSettingsCountriesRoute = AuthSettingsCountriesRouteImport.update({
  id: '/countries',
  path: '/countries',
  getParentRoute: () => AuthSettingsRoute,
} as any)
const AuthSettingsConfigurationRoute =
  AuthSettingsConfigurationRouteImport.update({
    id: '/configuration',
    path: '/configuration',
    getParentRoute: () => AuthSettingsRoute,
  } as any)
const AuthSettingsPlansIndexRoute = AuthSettingsPlansIndexRouteImport.update({
  id: '/plans/',
  path: '/plans/',
  getParentRoute: () => AuthSettingsRoute,
} as any)
const AuthSettingsPlansPlanIdRoute = AuthSettingsPlansPlanIdRouteImport.update({
  id: '/plans/$planId',
  path: '/plans/$planId',
  getParentRoute: () => AuthSettingsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/bookings': typeof AuthBookingsRoute
  '/customers': typeof AuthCustomersRoute
  '/settings': typeof AuthSettingsRouteWithChildren
  '/stylists': typeof AuthStylistsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/login': typeof ExternalLoginRoute
  '/': typeof AuthIndexRoute
  '/settings/configuration': typeof AuthSettingsConfigurationRoute
  '/settings/countries': typeof AuthSettingsCountriesRoute
  '/settings/providers': typeof AuthSettingsProvidersRoute
  '/settings/service-categories': typeof AuthSettingsServiceCategoriesRoute
  '/settings/': typeof AuthSettingsIndexRoute
  '/settings/plans/$planId': typeof AuthSettingsPlansPlanIdRoute
  '/settings/plans': typeof AuthSettingsPlansIndexRoute
}
export interface FileRoutesByTo {
  '/bookings': typeof AuthBookingsRoute
  '/customers': typeof AuthCustomersRoute
  '/stylists': typeof AuthStylistsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/login': typeof ExternalLoginRoute
  '/': typeof AuthIndexRoute
  '/settings/configuration': typeof AuthSettingsConfigurationRoute
  '/settings/countries': typeof AuthSettingsCountriesRoute
  '/settings/providers': typeof AuthSettingsProvidersRoute
  '/settings/service-categories': typeof AuthSettingsServiceCategoriesRoute
  '/settings': typeof AuthSettingsIndexRoute
  '/settings/plans/$planId': typeof AuthSettingsPlansPlanIdRoute
  '/settings/plans': typeof AuthSettingsPlansIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/bookings': typeof AuthBookingsRoute
  '/_auth/customers': typeof AuthCustomersRoute
  '/_auth/settings': typeof AuthSettingsRouteWithChildren
  '/_auth/stylists': typeof AuthStylistsRoute
  '/_auth/transactions': typeof AuthTransactionsRoute
  '/_external/login': typeof ExternalLoginRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/settings/configuration': typeof AuthSettingsConfigurationRoute
  '/_auth/settings/countries': typeof AuthSettingsCountriesRoute
  '/_auth/settings/providers': typeof AuthSettingsProvidersRoute
  '/_auth/settings/service-categories': typeof AuthSettingsServiceCategoriesRoute
  '/_auth/settings/': typeof AuthSettingsIndexRoute
  '/_auth/settings/plans/$planId': typeof AuthSettingsPlansPlanIdRoute
  '/_auth/settings/plans/': typeof AuthSettingsPlansIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/bookings'
    | '/customers'
    | '/settings'
    | '/stylists'
    | '/transactions'
    | '/login'
    | '/'
    | '/settings/configuration'
    | '/settings/countries'
    | '/settings/providers'
    | '/settings/service-categories'
    | '/settings/'
    | '/settings/plans/$planId'
    | '/settings/plans'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/bookings'
    | '/customers'
    | '/stylists'
    | '/transactions'
    | '/login'
    | '/'
    | '/settings/configuration'
    | '/settings/countries'
    | '/settings/providers'
    | '/settings/service-categories'
    | '/settings'
    | '/settings/plans/$planId'
    | '/settings/plans'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/bookings'
    | '/_auth/customers'
    | '/_auth/settings'
    | '/_auth/stylists'
    | '/_auth/transactions'
    | '/_external/login'
    | '/_auth/'
    | '/_auth/settings/configuration'
    | '/_auth/settings/countries'
    | '/_auth/settings/providers'
    | '/_auth/settings/service-categories'
    | '/_auth/settings/'
    | '/_auth/settings/plans/$planId'
    | '/_auth/settings/plans/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  ExternalLoginRoute: typeof ExternalLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_external/login': {
      id: '/_external/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof ExternalLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/transactions': {
      id: '/_auth/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthTransactionsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/stylists': {
      id: '/_auth/stylists'
      path: '/stylists'
      fullPath: '/stylists'
      preLoaderRoute: typeof AuthStylistsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/customers': {
      id: '/_auth/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof AuthCustomersRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/bookings': {
      id: '/_auth/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof AuthBookingsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/settings/': {
      id: '/_auth/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthSettingsIndexRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/service-categories': {
      id: '/_auth/settings/service-categories'
      path: '/service-categories'
      fullPath: '/settings/service-categories'
      preLoaderRoute: typeof AuthSettingsServiceCategoriesRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/providers': {
      id: '/_auth/settings/providers'
      path: '/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof AuthSettingsProvidersRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/countries': {
      id: '/_auth/settings/countries'
      path: '/countries'
      fullPath: '/settings/countries'
      preLoaderRoute: typeof AuthSettingsCountriesRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/configuration': {
      id: '/_auth/settings/configuration'
      path: '/configuration'
      fullPath: '/settings/configuration'
      preLoaderRoute: typeof AuthSettingsConfigurationRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/plans/': {
      id: '/_auth/settings/plans/'
      path: '/plans'
      fullPath: '/settings/plans'
      preLoaderRoute: typeof AuthSettingsPlansIndexRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
    '/_auth/settings/plans/$planId': {
      id: '/_auth/settings/plans/$planId'
      path: '/plans/$planId'
      fullPath: '/settings/plans/$planId'
      preLoaderRoute: typeof AuthSettingsPlansPlanIdRouteImport
      parentRoute: typeof AuthSettingsRoute
    }
  }
}

interface AuthSettingsRouteChildren {
  AuthSettingsConfigurationRoute: typeof AuthSettingsConfigurationRoute
  AuthSettingsCountriesRoute: typeof AuthSettingsCountriesRoute
  AuthSettingsProvidersRoute: typeof AuthSettingsProvidersRoute
  AuthSettingsServiceCategoriesRoute: typeof AuthSettingsServiceCategoriesRoute
  AuthSettingsIndexRoute: typeof AuthSettingsIndexRoute
  AuthSettingsPlansPlanIdRoute: typeof AuthSettingsPlansPlanIdRoute
  AuthSettingsPlansIndexRoute: typeof AuthSettingsPlansIndexRoute
}

const AuthSettingsRouteChildren: AuthSettingsRouteChildren = {
  AuthSettingsConfigurationRoute: AuthSettingsConfigurationRoute,
  AuthSettingsCountriesRoute: AuthSettingsCountriesRoute,
  AuthSettingsProvidersRoute: AuthSettingsProvidersRoute,
  AuthSettingsServiceCategoriesRoute: AuthSettingsServiceCategoriesRoute,
  AuthSettingsIndexRoute: AuthSettingsIndexRoute,
  AuthSettingsPlansPlanIdRoute: AuthSettingsPlansPlanIdRoute,
  AuthSettingsPlansIndexRoute: AuthSettingsPlansIndexRoute,
}

const AuthSettingsRouteWithChildren = AuthSettingsRoute._addFileChildren(
  AuthSettingsRouteChildren,
)

interface AuthRouteChildren {
  AuthBookingsRoute: typeof AuthBookingsRoute
  AuthCustomersRoute: typeof AuthCustomersRoute
  AuthSettingsRoute: typeof AuthSettingsRouteWithChildren
  AuthStylistsRoute: typeof AuthStylistsRoute
  AuthTransactionsRoute: typeof AuthTransactionsRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthBookingsRoute: AuthBookingsRoute,
  AuthCustomersRoute: AuthCustomersRoute,
  AuthSettingsRoute: AuthSettingsRouteWithChildren,
  AuthStylistsRoute: AuthStylistsRoute,
  AuthTransactionsRoute: AuthTransactionsRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  ExternalLoginRoute: ExternalLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
